use std::{fs::File, path::Path};
use gpx::read;
use geo::HaversineDistance;
use geo::point;
use std::io::BufReader;
use walkdir::WalkDir;
use csv::Writer;
use serde::Serialize;
use gpx::Time;

mod custom_smoother;
mod simple_smoother;
mod smart_spike_removal;

use custom_smoother::{create_custom_original, create_custom_distbased_adaptive, ElevationData, SmoothingVariant};
use simple_smoother::{simple_spike_removal_only, calculate_simple_elevation_gain_loss};
use smart_spike_removal::{smart_spike_distbased, GpsQualityMetrics};

#[derive(Debug, Serialize)]
struct GpxAnalysis {
    filename: String,
    raw_distance_km: u32,
    raw_elevation_gain_m: u32,
    average_time_interval_seconds: u32,
    custom_original_elevation_gain_m: u32,
    custom_distbased_elevation_gain_m: u32,
    simple_spike_only_elevation_gain_m: u32,
    spike_distbased_elevation_gain_m: u32,
    spike_original_elevation_gain_m: u32,
    smart_spike_distbased_elevation_gain_m: u32,
    distbased_6m_interval_elevation_gain_m: u32,
    distbased_3m_interval_elevation_gain_m: u32,
    distbased_1m_interval_elevation_gain_m: u32,
    official_elevation_gain_m: u32,
    distbased_vs_official_diff_m: i32,
    spike_distbased_vs_official_diff_m: i32,
    spike_original_vs_official_diff_m: i32,
    smart_vs_official_diff_m: i32,
    distbased_6m_vs_official_diff_m: i32,
    distbased_3m_vs_official_diff_m: i32,
    distbased_1m_vs_official_diff_m: i32,
    gps_quality_score: f32,
}
fn get_official_elevation_gain(filename: &str) -> u32 {
